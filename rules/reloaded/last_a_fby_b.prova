% Demonstrate last(A)->B.
%
% This will print:
%
% Logout user1 10.10.10.10
% A new login candidate user3 60.60.60.60
% Logout user3 60.60.60.60
% Pattern detected: [[[user3,async,0,request,[logout,user3,60.60.60.60]]]] 
% Pattern detected: [[[user1,async,0,request,[logout,user1,10.10.10.10]]]] 
%
% Global constant $Count is used for counting successful detections and passing them back to the Java test

:- eval(server()). 

server() :-
	% Start detection on each new login
	rcvMult(XID,Protocol,From,request,login(User,IP)),
	server_1(XID,User).

server_1(XID,User) :-
	@group(g1) @not
	rcvMsg(XID,Protocol,From,request,login(User,IP)),
	println(["A new login candidate",User,IP]," ").
server_1(XID,User) :-
	@group(g1)
	rcvMsg(XID,Protocol,From,request,logout(User,IP)),
	println(["Logout",User,IP]," ").
server_1(XID,User) :-
	@and(g1)
	rcvMsg(XID,Protocol,From,and,Events),
	$Count.incrementAndGet(),
	println(["Pattern detected: ",Events," "]).

:- eval(client()). 

client() :- 
	% Send all the test messages from a separate thread
	switch_thread(),

	% Use user-id as conversation-id (XID) for partitioning so that each user is processed sequentially
	sendMsg(user1,async,0,request,login(user1,'10.10.10.10')),
	sendMsg(user3,async,0,request,login(user3,'50.50.50.50')),
	sendMsg(user2,async,0,request,login(user2,'30.30.30.30')),
	sendMsg(user3,async,0,request,login(user3,'60.60.60.60')),
	sendMsg(user1,async,0,request,logout(user1,'10.10.10.10')),
	sendMsg(user1,async,0,request,login(user1,'20.20.20.20')),
	sendMsg(user3,async,0,request,logout(user3,'60.60.60.60')).

switch_thread() :-
	sendMsgSync(XID,task,0,switch,[]),
	rcvMsg(XID,task,From,switch,[]).
