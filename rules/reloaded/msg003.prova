% This test can only be run from ProvaMessagingTest.java as it requires an AtomicLong count passed a global constant.

:- eval(msg003()).

msg003() :-
	println(["==========Messaging test 003=========="]),

	% This reaction will stay active after receiving the first message so that both messages will be received
	rcvMult(XID,self,From,inform,a(I)),
	println(["Received: ",rcvMult(XID,self,From,inform,a(I))],""),
	$Count.incrementAndGet().
msg003() :-
	for(I,1,2),
	sendMsg(XID,self,0,inform,a(I)),
	println(["Sent: ",sendMsg(XID,self,0,inform,a(I))],"").

for(From,From,From) :- !.
for(From,From,To) :-
	From<=To.
for(I,From,To) :-
	From2=From+1,
	for(I,From2,To).

% This outputs:
% ==========Messaging test 003==========
% Sent: [sendMsg,prova1,self,0,inform,[a,1]]
% Sent: [sendMsg,prova2,self,0,inform,[a,2]]
% Received: [rcvMsg,prova1,self,0,inform,[a,1]]
% Received: [rcvMsg,prova2,self,0,inform,[a,2]]
