% Capital expenses

% In many organizations it common to treat capital and revenue/expense funding separately. While there can be organization-specific 
% subdivisions of these (e.g. different ring-fenced revenue accounts) the notion of capital as opposed to other expenditure is 
% common across many organizations and legal jurisdictions. In the UK it is recognized for taxation purposes though defined 
% by case law rather than by statute.

% Since this categorization is so common we support it directly in the payments ontology by providing a SKOS concept scheme 
% payment:payment:expenditure-type) containing just two concepts (payment:capital and payment:revenue) which are both in that 
% scheme as also typed as payment:ExpenditureType (a subclass of skos:Concept) for ease of access.


:-eval(owl_typing("http://reference.data.gov.uk/def/payment#")).
                   
% capital is an individual in Ontolgy and has the type of classes "ExpenditureCategory", "Concept" and "Resource"
% the class "ExpenditureLine" is subclass of class "Observation"

eq(X,X).

isCapital(X^^payment:capital).
isExpenditureCategory(X^^payment:ExpenditureCategory).
isConcept(X^^payment:Concept).
isResource(X^^payment:Resource).
isExpenditureLine(X^^payment:ExpenditureLine).
isObservation(X^^qb:Observation).

:-solve(testType(X)). % Should be X=1,2,3.

	% Should succeed.
testType(1):-
	isExpenditureLine(X^^qb:Observation).

	% Should succeed.
testType(2):-
	X^^payment:Observation = c^^payment:ExpenditureLine,
	isExpenditureLine(X^^qb:Observation).
	
	% Should succeed. 
testType(3):-
	eq(X^^qb:Observation, Y^^payment:ExpenditureLine),
	isExpenditureLine(X^^qb:Observation).

	% Should fail. 
testType(4):-
	isExpenditureLine(c^^qb:Observation).

	% Should fail.
testType(5):-
	eq(X^^payment:Observation, c).
		
	%Should fail.
testType(6):-
	eq(X^^payment:ExpenditureLine, c^^qb:Observation).	

	
