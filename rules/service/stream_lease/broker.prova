:- eval(broker()).

broker() :-
	println(["==========In-engine stream broker=========="]),

	reactor().

reactor() :-
	rcvMsg(XID,Protocol,Producer,advertise,Stream),
	println([XID,":broker: advertising ",Producer,"->",Stream]),
	assert(capability(XID,Producer,Stream)),
	$Count.incrementAndGet().
reactor() :-
	rcvMsg(XID,Protocol,Subscriber,subscribe,Stream),
	println([XID,":broker: subscribing ",Subscriber,"->",Stream]),
	$Count.incrementAndGet(),
	matcher(XID,Subscriber,Stream).

matcher(XID,Subscriber,Stream) :-
	running(Topic,Producer,Stream),
	% Let the subscriber connect to the active stream
	!,
	% Grant the subscriber a lease and recommend 500 ms timeout before it renews the lease
	sendMsg(XID,osgi,Subscriber,present,[Topic,'500 ms']),
	waitLease(XID,Subscriber,Topic).
matcher(XID,Subscriber,Stream) :-
	capability(XIDC,Producer,Stream),
	% There is a matching producer
	!,
	unique_id(Topic),
	% Grant the subscriber a lease and recommend 500 ms timeout before it renews the lease
	sendMsg(XID,osgi,Subscriber,present,[Topic,'500 ms']),
	rcvMsg(XID,Protocol,Subscriber,ready,[]),
	sendMsg(Topic,osgi,Producer,start,Stream),
	assert(running(Topic,Producer,Stream)),
	waitLease(XID,Subscriber,Topic).
matcher(Subscriber,Stream) :-
	sendMsg(XID,osgi,Subscriber,missing,Stream).

% Watch for lease expiration
waitLease(XID,Subscriber,Topic) :-
	@group(lease) @not @timeout('1 sec')
	rcvMsg(XID,Protocol,Subscriber,renew,[]),
	println(["broker[",XID,"]: received a lease renewal request from ",Subscriber," for ",Topic]),
	% A renewal request arrived in time, the reaction group fails, so restart the timeout
	waitLease(XID,Subscriber,Topic).
waitLease(XID,Subscriber,Topic) :-
	@and(lease)
	rcvMsg(XID,Protocol,Self,and,_),
	% The timeout expired so let the subscriber know
	sendMsg(XID,osgi,Subscriber,stop,lease_expired(Topic)).
